JWT (JSON Web Token) состоит из трех частей, разделенных точками: заголовок (header), полезная нагрузка (payload) и подпись (signature).

1. **Заголовок (Header):** Это JSON-объект, содержащий два элемента: тип токена (typ) и используемый алгоритм хеширования (alg). Например:
{
    "alg" : "HS256",
    "typ" : "JWT"
}

2. Полезная нагрузка (Payload): Это также JSON-объект, который содержит утверждения (claims) о пользователе или другую информацию.
Существуют три типа утверждений:
 - Утверждения о пользователе (registered claims) - Их значения стандартизированы и включают в себя, например, идентификатор пользователя (subject),
 время выдачи токена (iat) и срок действия токена (exp).
 - Публичные утверждения (public claims):
 - Защищенные (приватные) утверждения (private claims):

 3. Подпись (Signature): Это рещзультат шифрования кодированной строки заголовка и полезной нагрузки и секретного ключа (или сертификата),
 используя указанный алгоритм из заголовка. Это обеспечивает проверку подлинности данных и защиту их от изменения.

 Процесс создания JWT выглядит следующим образом:
 1. Создание заголовка: Формируется JSON-объект с типом токена и выбранным алгоритмом хеширования.
 2. Создание полезной нагрузки: Формируется JSON-объект с необходимой информацией (идентификатор пользователя, срок действия и т.д.).
 3. Кодирование заголовка и полезной нагрузки: оба JSON-объекта кодируются в формат Base64Url.
 4. Создание подписи: Заголовок и полезная нагрузка объединяются с "секретным ключ" и хешируется указанным алгоритмом из заголовка.
 5. Создание JWT: Полученные закодированные строки заголовка и полезной нагрузки (из пункта 3), а также подпись объединяются черзе точки.

 Вот пример JWT: heder.payload.signature (в кодированном виде выглядит как 'sudfvuawsgfk.iagalkjvhbsfjkhvgjksafhgvjklashfgvkjas.ajksgfkjhsgdfkjashdgf')


 Сервер создает JWT и отправляет его пользователю.

 Далее каждый запрос пользователя будет сопровождаться заголовком Auth в котором будет использован
 тип Bearer token в который будет добавляться JWT.

 Сервер, получив очередной запрос, проверяет, а есть ли заголовок для аутентификации пользователя.
 Найдя его он вытаскивает JWT и начинает его проверять.
 1) проверка на целостность структуры токена (есть три части разделенные точками)
 2) Берет перву и вторую части и пытается их декодировать по алгоритму Base64Url
 3) Сервер проверяет истинность данных в JWT, то есть берется первая и вторая части от полученного в запросе JWT.
 Они еще раз шифруются с помощью секретного ключа сервера и полученный результат сравнивается с третьей частью JWT (подпись).
 Если они совпадают, то JWT валидный.
 4) Из второй части JWT берут данные от полей JSON-объекта, такие как username и expire date.

 ИТОГО: если в результате проверки JWT выяснится, что:
 - структура нарушена (невозможно декодировать и получить значения полей)
 - подпись не совпадает содержимому
 - срок действия закончился
 - такого username нет (или недействителное)

 то результат провреки -> EXCEPTION -> отказ в выполнении запроса


