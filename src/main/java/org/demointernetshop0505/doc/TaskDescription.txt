Написать приложение для:
- регистрации пользователей
- подтверждения регистрации
- получение информауии о пользователе
(полную информацию для администратора, сокращенную версию для пользователя)
- поиск по id, email


Для хранения данных о пользователе используем класс User
-id
- firstName
- lastName
- email
- hashPassword
- role
- status
- photoLink -> будем хранить путь (ссылку) на файл (фото), связанный с этим user
- createDate
- updateDate

enum Role: ADMIN, USER, MANAGER

enum Status: NOT_CONFIRM, CONFIRMED, BANNED, DELETE

Новый пользователь проходит процедуру регистрации, вводит все свои данные.
Если данные кооректны, то мы:
- регистрируем пользователя (то есть заносим его данные в БД)
- устанавливаем статус в NOT_CONFIRM
- генерируем новый уникальный код подверждения и отправляем ему на почту (в виде http-ссылки).

Пользователь переходит по ссылке из письма, то есть тем самым отправляет на наш сервер get-запрос
на определенный путь, который мы обрабатываем.
Мы проверем, что код подтверждения:
- во-первых, существует (то есть мы его создали и коиу-то отправили)
- во-вторых, код действительный (то есть его "срок действия" еще не истек)

Находим того пользователя для которого мы этот код создавали и у него меняем статус на CONFIRMED.


Для хранения данных о "фото" (файлах) пользователя (а их может быть несколько
для одного пользователя) - создаем класс FileInfo

- id
- link
- user -> пользователь, к которому эта картинка относится


---------------------- API DESCRIPTION ------------------
полный перечень запросов, которые мы готовы принимать и обрабатывать (список методов контроллеров)

UserController
// добавить нового пользователя
public UserResponseDto addNewUser(UserRequestDto request);

// найти всех пользователей (полную информацию - для ADMIN)
public List<User> findAllFullDetails();

// найти всех пользователей (ограниченную информацию - для USER)
public List<UserResponseDto> findAll();

// найти пользователя по ID
public UserResponseDto findUserById(Integer id);

// найти пользователя по email
public UserResponseDto findUserByEmail(String email);

// найти пользователя по имени
public List<UserResponseDto> findUserByLastName(String lastName);

// обновить данные от имени пользователя (пользователь хочет
// поменять какие-то данные в своем профиле)

как можно сделать update:
1 вариант - метод get через стоку запроса - указываем параметр в котором
передаем новое значение
localhost:8080/zpi/users/update?lastname=...&password=....

2 вариант - метод put/post с использованием dto
когда мы получаем такой запросб то из тела запроса данные попадают в
UserUpdateRequestDto и ЕСЛИ в этом объекте КАКОЕ-ТО поле присутствует
и его значение удовлетворяет требюованиям валидации, то мы должны
заменить в нашем пользователе значение этого поля на новое

public UserResponseDto updateUser(UserUpdateRequestDto request);

// удаление записи
public boolean deleteUser(Integer id);



CodeConfirmationController

// подтверждение почты через отправку кода регистрации
public boolean receiveConfirmationCode(String codeConfirmation);

// повторый запрос кода подтверждения для существующего пользователя
// запрос будет производится через параметр строки запрос
// localhost:8080/api/users/code/renew?email=....

public boolean codeRenew(String email);




